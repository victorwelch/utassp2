<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function ($filter, $location,spAriaUtil, $window) {
	var c = this;
	c.options.glyph = c.options.glyph || 'search';
	c.options.title = c.options.title || c.data.searchMsg;
	c.options.color = c.options.color || "default";

	c.onSelect = function($item, $model, $label) {
		//alert('onSelect');
		//debugger;
		if ($item.target)
			window.open($item.url, $item.target);
		else
			$location.url($item.url);
	};

	c.getResults = function(query) {
		//alert('getResults');
		//debugger;
		return c.server.get({q: query}).then(function(response) {
			var a = $filter('orderBy')(response.data.results, '-score');
			var resultCount = $filter('limitTo')(a, c.data.limit).length;
				spAriaUtil.sendLiveMessage(parseInt(resultCount) + " " + 
																	 c.data.resultMsg + " " +
																	 c.data.navigationMsg + 
																	 getNavigationKeys());
			return $filter('limitTo')(a, c.data.limit);
		});
	}

	c.submitSearch = function() {
		//alert('submitSearch');
		//debugger;
		if (c.selectedState)
			$location.search({
				id: 'utassp01_search',
				t: c.data.searchType,
				q: c.selectedState
			});
	}
	
	function getNavigationKeys() {
		if($window.navigator.userAgent.indexOf("Mac OS X") > -1) 
			return 'âŒ˜';
		return 'Control';
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css>div.input-group {&#13;
	margin-top:10px;  &#13;
}&#13;
&#13;
div.myShadow {&#13;
  -webkit-box-shadow: 10px 10px 36px 0px rgba(0,0,0,0.78);&#13;
  -moz-box-shadow: 10px 10px 36px 0px rgba(0,0,0,0.78);&#13;
  box-shadow: 10px 10px 36px 0px rgba(0,0,0,0.78);  &#13;
}&#13;
&#13;
ul.dropdown-menu {&#13;
    min-width: 100%;&#13;
    border-radius: 0px 0px 4px 4px;&#13;
    margin:0px;&#13;
}&#13;
&#13;
ul.dropdown-menu a.ta-item {&#13;
	line-height: 20px;&#13;
}&#13;
&#13;
ul.dropdown-menu i.ta-icon, i.ta-img {&#13;
    width: 20px;&#13;
    height: 20px;&#13;
    background-size: contain;&#13;
    display: inline-block;&#13;
    background-repeat: no-repeat;&#13;
    background-position: center center;&#13;
    text-align: center;&#13;
    line-height: 20px;&#13;
    float:left;&#13;
    margin-right: 8px;&#13;
}&#13;
&#13;
input[name="q"] {&#13;
color: black;&#13;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>utassp01_typeahead_search_widget</id>
        <internal>false</internal>
        <link><![CDATA[function(scope) {
	var lazyLoader = $injector.get("lazyLoader");
	lazyLoader.putTemplates(scope.data.typeaheadTemplates);
}]]></link>
        <name>UTASSP Typeahead Search Widget</name>
        <option_schema>[{"name":"title","label":"Title","type":"string"},{"name":"color","label":"Color","type":"string"},{"name":"glyph","label":"glyph","type":"string"},{"name":"size","label":"Size","type":"string"},{"hint":"Number of typeahead search results returned (default 15)","name":"limit","label":"Limit","type":"integer"},{"displayValue":"Search Source","hint":"If provided, limit the scope of the typeahead search to the given search sources","name":"contextual_search_sources","display_value_list":[],"label":"Contextual Search Sources","type":"glide_list","value":"sp_search_source","ed":{"reference":"sp_search_source"}}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	gs.info('+--- aaaaaaaaa');
	data.resultMsg = gs.getMessage("Search results");
	data.navigationMsg = gs.getMessage("To navigate, use up and down arrow keys while holding ");
	if (!options.contextual_search_sources) {
		gs.info('+--- bbbbbbbbb');
		data.searchType = $sp.getParameter("t");		
	} else {
		gs.info('+--- ccccccccc');
		var contextualSearchSources = options.contextual_search_sources.split(",");
		if (contextualSearchSources.length == 1) {
			gs.info('+--- ddddddddd');
			var searchSourceGR = new GlideRecord("sp_search_source");
			if (searchSourceGR.get(contextualSearchSources[0])) {
				gs.info('+--- eeeeeeeee');
				data.searchType = searchSourceGR.getValue("id");				
			}
		} else
			gs.info('+--- fffffffff');
			data.searchType = $sp.getParameter("t");
	}

	data.results = [];
	data.searchMsg = gs.getMessage("Search");
	data.limit = options.limit || 15;
	var textQuery = '123TEXTQUERY321';

	if (!input) {
		gs.info('+--- ggggggggg');
		data.typeaheadTemplates = {};

		var searchGroupTemplatesGR = new GlideRecord("sp_search_source");
		searchGroupTemplatesGR.query();
		while(searchGroupTemplatesGR.next()) {
			gs.info('+--- hhhhhhhhh');
			if (searchGroupTemplatesGR.getElement("advanced_typeahead_config").getDisplayValue() == "true") {
				gs.info('+--- iiiiiiiii : '+searchGroupTemplatesGR.getValue("id") + ".html");
				data.typeaheadTemplates["sp-typeahead-" + searchGroupTemplatesGR.getValue("id") + ".html"] = $sp.translateTemplate(searchGroupTemplatesGR.getValue("typeahead_template"));				
			}
		}

		gs.info('+--- jjjjjjjjj');
		return;
	}

	data.q = input.q;

	//Gotta decide if we want to use the portal's sources, or use the defaults declared by
	//the sys property
	var useDefaultPortals;
	if (!$sp.getPortalRecord()) {
		gs.info('+--- kkkkkkkkk');
		useDefaultPortals = true;
	} else {
		gs.info('+--- lllllllll');
		var searchSourcesForPortalGR = new GlideRecord("m2m_sp_portal_search_source");
		searchSourcesForPortalGR.addQuery("sp_portal", $sp.getPortalRecord().getUniqueValue());
		searchSourcesForPortalGR.query();
		useDefaultPortals = searchSourcesForPortalGR.getRowCount() == 0;
	}

	if (options.contextual_search_sources) {
		gs.info('+--- mmmmmmmmm');
		var contextualSearchSourceGR = new GlideRecord("sp_search_source");
		contextualSearchSourceGR.addQuery("sys_id", "IN", options.contextual_search_sources);
		contextualSearchSourceGR.query();
		while (contextualSearchSourceGR.next()) {
			gs.info('+--- nnnnnnnnn');
			data.searchType = contextualSearchSourceGR.getValue("id");
			getResults(contextualSearchSourceGR);
		}
	} else if (useDefaultPortals) {
		gs.info('+--- ooooooooo');
		var defaultSearchSourceGR = new GlideRecord("sp_search_source");
		var defaultSearchSourceIDList = gs.getProperty("glide.service_portal.default_search_sources", "");
		defaultSearchSourceGR.addQuery("sys_id", "IN", defaultSearchSourceIDList);
		defaultSearchSourceGR.addQuery("enable_typeahead", true);
		defaultSearchSourceGR.query();
		while(defaultSearchSourceGR.next()) {
			//.info('+--- ppppppppp');
			getResults(defaultSearchSourceGR);
		}
	} else {
		gs.info('+--- qqqqqqqqq');
		var m2mSearchSourceGR = new GlideRecord("m2m_sp_portal_search_source");
		m2mSearchSourceGR.addQuery("sp_search_source.enable_typeahead", true);
		m2mSearchSourceGR.addQuery("sp_portal", $sp.getPortalRecord().getUniqueValue());
		m2mSearchSourceGR.query();
		while(m2mSearchSourceGR.next()) {
			gs.info('+--- rrrrrrrrr');
			getResults(m2mSearchSourceGR.getElement("sp_search_source").getRefRecord());
		}
	}

	function getResults(gr) {
		// *** Plugin inactive
		//Check if the user is allowed to see this source.
		//var userCriteria = new GlideSPUserCriteria();
		//if (userCriteria.isEnabled()) {
		//	if (!userCriteria.userCanSeeSearchSource(gr.getUniqueValue()))
		//		return;
		//} else {
		//	var gs = GlideSession.get();
		//	var thisUser = gs.getUserID();
		//	var searchSourceRoles = gr.getValue("roles");
		//	if (searchSourceRoles && !gs.hasRole(searchSourceRoles))
		//		return;
		//}
		// ***
		function myCanReadSource(_pGr)
		{
			var thisResult = false;
			var thisSourceLabel = _pGr.getValue('name');
			gs.info('+--- ssssss ++++ myCanReadSource2 : '+thisSourceLabel);
			if (thisSourceLabel != 'Service Catalog') {
				var l_myGr = new GlideRecord('kb_knowledge_base');
				var l_thisQuery = 'title=' + thisSourceLabel;
				l_myGr.addEncodedQuery(l_thisQuery);
				l_myGr.query();
				if (l_myGr.next()) {
					if (l_myGr.canRead()) thisResult = true;
				}						
			} else {
				thisResult = true;
			}
			return thisResult;
		}
		// ***
		if (!myCanReadSource(gr)) { return; }
		
		if (gr.is_scripted_source) {
			var input = {};
			input.query = data.q;
			var evaluator = new GlideScopedEvaluator();
			var results = evaluator.evaluateScript(gr, "data_fetch_script", input);

			results.forEach(function(item) {
				if (gr.getElement("advanced_typeahead_config").getDisplayValue() == "true")
					item.templateID = "sp-typeahead-" + gr.getValue("id") + ".html";
				else {
					item.glyph = gr.getValue("typeahead_glyph");
					item.linkToPage = gr.getValue("page");
				}
				data.results.push(item);
			});
		} else {
			var primaryField = gr.getValue("primary_display_field");
			var displayFields = gr.getValue("display_fields");

			var resultGR = new GlideRecordSecure(gr.getValue("source_table"));
			var condition = gr.getValue("condition");
			if (condition)
				resultGR.addEncodedQuery(condition);
			if (data.q)
				resultGR.addQuery('123TEXTQUERY321', data.q);
			resultGR.query();

			var searchTableCount = 0;
			while (resultGR.next() && searchTableCount < data.limit) {
				if (!resultGR.canRead())
					continue;

				var secondaryValues = {};

				if (displayFields)
					displayFields.split(",").forEach(function(field) {
						var obj = getField(resultGR, field);
						secondaryValues[field] = obj;
					});

				var item = {
					primary: (primaryField) ? resultGR.getValue(primaryField) : resultGR.getDisplayValue(),
					sys_id: resultGR.getUniqueValue(),
					table: resultGR.getTableName(),
					fields: secondaryValues
				};

				if (gr.getElement("advanced_typeahead_config").getDisplayValue() == "true")
					item.templateID = "sp-typeahead-" + gr.getValue("id") + ".html";
				else {
					item.glyph = gr.getValue("typeahead_glyph");
					item.linkToPage = gr.getValue("page");
				}

				data.results.push(item);
				searchTableCount++;
			}
		}

		var pageGR = new GlideRecord("sp_page");
		if (pageGR.get(gr.getValue("page")))
			var pageID = pageGR.getValue("id");

		data.results.forEach(function(result) {
			if (result.url)
				return;

			if (pageID) {
				result.url = "?id=" + pageID;
				if (result.sys_id)
					result.url += "&sys_id=" + result.sys_id;
				if (result.table)
					result.url += "&table=" + result.table;
			} else {
				result.url = "";
			}
		});
	}

	function getField(gr, name) {
		var f = {};
		f.display_value = gr.getDisplayValue(name);
		f.value = gr.getValue(name);
		var ge = gr.getElement(name);
		if (ge == null)
			return f;

		f.type = ge.getED().getInternalType();
		f.label = ge.getLabel();
		return f;
	}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-10-25 16:38:00</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>e9dd45fe4f512300f006121f9310c71c</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>UTASSP Typeahead Search Widget</sys_name>
        <sys_package display_value="utassp" source="x_287765_utassp">2e58c8624f112300f006121f9310c726</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="utassp">2e58c8624f112300f006121f9310c726</sys_scope>
        <sys_update_name>sp_widget_e9dd45fe4f512300f006121f9310c71c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-11-19 22:20:32</sys_updated_on>
        <template><![CDATA[<form ng-submit="c.submitSearch()">
  <input type="hidden" name="id" value="search"/>
  <input type="hidden" name="t" value="{{data.searchType}}"/>
  <div class="input-group input-group-{{::c.options.size}} myShadow">
    <!-- uses ui.bootstrap.typeahead -->
    <input name="q" type="text" placeholder="{{::c.options.title}}" ng-model="c.selectedState"
           ng-model-options="{debounce: 250}" autocomplete="off"
           uib-typeahead="item as item.primary for item in c.getResults($viewValue)"
           typeahead-focus-first="false"
           typeahead-on-select="c.onSelect($item, $model, $label)"
           typeahead-template-url="utassp01_sp_typeahead.html"
           typeahead-popup-template-url="utassp01_sp_typeahead_popup.html"
           class="form-control input-typeahead"
           title="{{::c.options.title}}"
           role="textbox"
           aria-label="{{::c.options.title}}" tabindex="0" aria-haspopup="true">
    <span class="input-group-btn">
      <button name="search" type="submit" class="btn btn-{{::c.options.color}}"
              title="{{::c.options.title}}"
              aria-label="{{::c.options.title}}">
    	<i ng-if="::c.options.glyph" class="fa fa-{{::c.options.glyph}}"></i>
      </button>
    </span>
  </div>
</form>]]></template>
    </sp_widget>
</record_update>
