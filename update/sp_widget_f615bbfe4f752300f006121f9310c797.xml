<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>standard</category>
        <client_script><![CDATA[function ($scope, $location, spUtil, $rootScope) {
	spUtil.setSearchPage($scope.data.t);
	$scope.showScore = $scope.options.show_score == 'true' || $scope.options.show_score == true;

	$scope.getBGImage = function(item) {
		return {"background-image": "url('" + item.picture + "')"};
	};

	$scope.search = function(searchTerm) {
		$location.search('q', searchTerm);
	};

	$scope.highlight = function(haystack, needle) {
		if (!haystack)
			return "";

		if (!needle)
			return haystack;

		return haystack.replace(new RegExp(needle.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1"), "gi"), function(match) {
			return '<span class="highlight mark">' + match + '</span>';
		});
	};
}]]></client_script>
        <controller_as>c</controller_as>
        <css>a.question-tag {
    color: #39739d;
    background-color: #e1ecf4;
    border: 1px solid #e1ecf4;
    display: inline-block;
    margin: 4px 4px 4px 0;
    border-radius: 0;
    text-align: center;
    line-height: 1;
    padding: .4em .5em;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>utassp02_search_page_widget</id>
        <internal>false</internal>
        <link><![CDATA[function(scope) {
	var lazyLoader = $injector.get("lazyLoader");
	lazyLoader.putTemplates(scope.data.resultTemplates);
}]]></link>
        <name>UTASSP Search Page Widget 2</name>
        <option_schema>[{"hint":"Show search result relative ranking","name":"show_score","section":"other","label":"Show score","type":"boolean"},{"hint":"Maximum number of search results when not specifying a search group (default 30)","name":"max_all","section":"Behavior","label":"Max results for All search","type":"integer"},{"hint":"Maximum number of search results when specifying a search group (default 15)","name":"max_group","section":"Behavior","label":"Max results for single search source","type":"integer"},{"name":"show_did_you_mean","default_value":"false","section":"Behavior","label":"Show Did You Mean","type":"boolean"}]</option_schema>
        <public>true</public>
        <roles/>
        <script><![CDATA[// populate the 'data' variable
data.showPrices = $sp.showCatalogPrices();
data.q = $sp.getParameter('q');
data.t = $sp.getParameter('t');
data.results = [];

if (data.t)
	data.limit = options.max_group || 15;
else
	data.limit = options.max_all || 30;

//Gotta decide if we want to use the portal's sources, or use the defaults declared by
//the sys property
var useDefaultPortals;
if (!$sp.getPortalRecord()) {
	useDefaultPortals = true;
} else {
	var searchSourcesForPortalGR = new GlideRecord("m2m_sp_portal_search_source");
	searchSourcesForPortalGR.addQuery("sp_portal", $sp.getPortalRecord().getUniqueValue());
	searchSourcesForPortalGR.query();
	useDefaultPortals = searchSourcesForPortalGR.getRowCount() == 0;
}

data.resultTemplates = {};

if (useDefaultPortals) {
	var defaultSearchSourceGR = new GlideRecord("sp_search_source");
	var defaultSearchSourceIDList = gs.getProperty("glide.service_portal.default_search_sources", "");
	defaultSearchSourceGR.addQuery("sys_id", "IN", defaultSearchSourceIDList);
	if (data.t)
		defaultSearchSourceGR.addQuery("id", data.t);
	defaultSearchSourceGR.query();
	while(defaultSearchSourceGR.next()) {
		data.resultTemplates["sp-search-source-" + defaultSearchSourceGR.getValue("id") + ".html"] = $sp.translateTemplate(defaultSearchSourceGR.getValue("search_page_template"));
		getResults(defaultSearchSourceGR);
	}
} else {
	var m2mSearchSourceGR = new GlideRecord("m2m_sp_portal_search_source");
	if (data.t)
		m2mSearchSourceGR.addQuery("sp_search_source.id", data.t);
	m2mSearchSourceGR.addQuery("sp_portal", $sp.getPortalRecord().getUniqueValue());
	m2mSearchSourceGR.query();
	while(m2mSearchSourceGR.next()) {
		var searchSourceGR = m2mSearchSourceGR.getElement("sp_search_source").getRefRecord();
		data.resultTemplates["sp-search-source-" + searchSourceGR.getValue("id") + ".html"] = $sp.translateTemplate(searchSourceGR.getValue("search_page_template"));
		getResults(searchSourceGR);
	}
}

function getResults(gr) {
	//Check if the user is allowed to see this source.
	//var userCriteria = new GlideSPUserCriteria();
	//if (userCriteria.isEnabled()) {
	//	if (!userCriteria.userCanSeeSearchSource(gr.getUniqueValue()))
	//		return;
	//} else {
	//	var gs = GlideSession.get();
	//	var searchSourceRoles = gr.getValue("roles");
	//	if (searchSourceRoles && !gs.hasRole(searchSourceRoles))
	//		return;
	//}

	if (gr.is_scripted_source) {
		var input = {};
		input.query = data.q;
		input.facets = {};
		var evaluator = new GlideScopedEvaluator();
		var results = evaluator.evaluateScript(gr, "data_fetch_script", input);
		if(results) {
			results.forEach(function(item) {
				item.templateID = "sp-search-source-" + gr.getValue("id") + ".html";
				data.results.push(item);
			});			
		}
	} else {
		var primaryField = gr.getValue("primary_display_field");
		var displayFields = gr.getValue("display_fields");

		var resultGR = new GlideRecordSecure(gr.getValue("source_table"));
		var condition = gr.getValue("condition");
		if (condition)
			resultGR.addEncodedQuery(condition);
		if (data.q)
			resultGR.addQuery('123TEXTQUERY321', data.q);
		resultGR.query();

		var searchTableCount = 0;
		while (resultGR.next() && searchTableCount < data.limit) {
			if (!resultGR.canRead())
				continue;

			var secondaryValues = {};

			if (displayFields)
				displayFields.split(",").forEach(function(field) {
					var obj = getField(resultGR, field);
					secondaryValues[field] = obj;
				});

			data.results.push({
				primary: (primaryField) ? resultGR.getValue(primaryField) : resultGR.getDisplayValue(),
				sys_id: resultGR.getUniqueValue(),
				table: resultGR.getTableName(),
				templateID: "sp-search-source-" + gr.getValue("id") + ".html",
				fields: secondaryValues
			});
			searchTableCount++;
		}
	}

// 	if (data.results.length == 0 && options.show_did_you_mean) {
// 		var didYouMean = new GlideTSDidYouMean();
// 		var suggestions = [];
// 		data.suggestions = [];
// 		if (data.t == 'kb')
// 			suggestions = didYouMean.getAlternatePhrases(data.q, 'kb_knowledge');
// 		else if (data.t == 'sc')
// 			suggestions = didYouMean.getAlternatePhrases(data.q, 'sc_cat_item');
// 		else
// 			suggestions = didYouMean.getAlternatePhrases(data.q, gr.getValue("source_table"));

// 		for(var i=0; i<suggestions.size(); i++) {
// 			 if(data.suggestions.indexOf(suggestions.get(i) + '') == -1)
// 					data.suggestions.push(suggestions.get(i) + '');
// 		}
// 	}
}

function getField(gr, name) {
	var f = {};
	f.display_value = gr.getDisplayValue(name);
	f.value = gr.getValue(name);
	var ge = gr.getElement(name);
	if (ge == null)
		return f;

	f.type = ge.getED().getInternalType();
	f.label = ge.getLabel();
	return f;
}
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-11-20 01:20:12</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>f615bbfe4f752300f006121f9310c797</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>UTASSP Search Page Widget 2</sys_name>
        <sys_package display_value="utassp" source="x_287765_utassp">2e58c8624f112300f006121f9310c726</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="utassp">2e58c8624f112300f006121f9310c726</sys_scope>
        <sys_update_name>sp_widget_f615bbfe4f752300f006121f9310c797</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-11-20 01:31:03</sys_updated_on>
        <template><![CDATA[<div>
  <div class="panel panel-default">
    <div ng-if="data.results.length==0">
      <div class="panel-heading"><h2 class="h4 panel-title">${No results}</h2></div>
      <div class="panel-body wrapper break-word">
        <p>${Your search - <b>{{data.q}}</b> - did not match any documents}</p>
        <div ng-if="options.show_did_you_mean && data.suggestions.length > 0">
          ${Did you mean:}
          <ul>
            <li ng-repeat="term in ::data.suggestions track by $index">
              <a ng-click="search(term)">{{::term}}</a>
            </li>
          </ul>
        </div>
        <p ng-if="options.show_did_you_mean && data.suggestions.length > 0">${Other suggestions}:</p>
        <p ng-if="!options.show_did_you_mean || data.suggestions.length == 0">${Suggestions}:</p>
        <ul>
          <li>${Make sure all words are spelled correctly}</li>
          <li>${Try different, more general, or fewer keywords}</li>
        </ul>
      </div>
    </div>

    <div ng-if="data.results.length>0" class="panel-heading break-word">
      <h2 class="h4 panel-title">${Search results for '{{data.q}}'}</h2>
    </div>

    <div role="list" >
      <div role="listitem" ng-repeat="item in data.results | orderBy:'score':true | limitTo:data.limit" class="panel-body b-b ">
        <div ng-include="item.templateID"></div>
      </div>
    </div>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
