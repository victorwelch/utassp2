<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, $http, $timeout, $location, spScUtil, nowAttachmentHandler, spUtil, $log, spAriaUtil, $q, spAtf, spModal) {
  var c = this;
	c.showSpecialInstructions = false;
	c.showDeliveryAddr = false;
	
	c.updateDetails = function() {
		c.deliverTo = c.data.cart.delivery_address;
		c.special_instructions = c.data.cart.special_instructions;
		c.requestedFor = {
			displayValue: c.data.cart.requested_for_display_name,
			value: c.data.cart.requested_for,
			name: 'requested_for'
		};
	}
	
	spAtf.init().then(function(atf) {
		$scope._atf = atf;
		atf.expose('checkout_util', checkoutUtil);
	});
	
	var checkoutUtil = {
		checkout: function() {
			var defer = $q.defer();
			$scope.c.triggerCheckout();
			var cleanUp = $scope.$on('$sp.sc_cat_item.submitted', function(o, result) {
				$timeout(function() {
					cleanUp();
					defer.resolve(result);
				}, 10);
			});
			return defer.promise;
		}
	}
	
	$scope.$on('dialog.upload_too_large.show', function(e){
		$log.error($scope.m.largeAttachmentMsg);
		spUtil.addErrorMessage($scope.m.largeAttachmentMsg);
	});

	$scope.m = $scope.data.msgs;
	var ah = $scope.attachmentHandler = new nowAttachmentHandler(function (attachments, action) {
		$scope.attachments = attachments;
		if (action === "added")
			$scope.setFocusToAttachment();
		if (action === "renamed")
			spAriaUtil.sendLiveMessage($scope.m.renameSuccessMsg);
		if (action === "deleted")
			spAriaUtil.sendLiveMessage($scope.m.deleteSuccessMsg);
	}, function (error) {
		spUtil.addErrorMessage(error.msg + error.fileName);
	});
	
	ah.setParams('sc_cart', c.data.cart.sys_id, 1024 * 1024 * $scope.data.maxAttachmentSize);
	
	$scope.attachmentHandler.getAttachmentList();

	$scope.confirmDeleteAttachment = function(attachment) {
		spModal.confirm($scope.data.msgs.delete_attachment).then(function() {
			$scope.attachmentHandler.deleteAttachment(attachment);
			$('#add_attachment_button').focus();
		});
	}

	c.changeShippingInfo = function() {
		if (c.data.action !== 'order_now')
			c.server.get({
						action: "change_shipping_info",
						requestedFor: c.requestedFor.value,
						special_instructions: c.special_instructions,
						deliverTo: c.deliverTo,
						cart: {name: c.data.cart.name}
					}).then(function(response) {
						c.data.cart = response.data.cart;
						c.updateDetails();
					});
	}
	
	c.triggerCheckout = function() {
		c.checkoutInProgress = true;
		var additionalParms = {'sysparm_requested_for': c.requestedFor.value,
													 'special_instructions': c.special_instructions,
													 'delivery_address': c.deliverTo
													};
		if (c.data.parentParams) {
				additionalParms.sysparm_parent_sys_id =  c.data.parentParams.sysparm_parent_sys_id;
				additionalParms.sysparm_parent_table = c.data.parentParams.sysparm_parent_table;
		}
		if (c.data.action == 'order_now') {
			spScUtil.orderNow(c.data.item.sys_id, c.data.item.quantity, c.data.item.fields, c.data.item.newRecordID, additionalParms).then(function(response) {
				var a = response.data.result;
				if (!$scope.data.parentParams)
					$scope.$emit("$$uiNotification", a.$$uiNotification);
				$scope.$emit("$sp.sc_cat_item.submitted", a);
				if (c.options.auto_redirect == 'false') {
					$rootScope.$broadcast("$sp.service_catalog.cart.submitted", true);
					spUtil.addInfoMessage($scope.m.requestSubmitted);
					return;
				} else if (!$scope._atf) {
					//$location.search('id=sc_request&is_new_order=true&table=sc_request&sys_id=' + a.sys_id);
					$location.search('id=utassp01_view_tickets&pageid=request');					
				}				
			});
		} else if (c.data.action == 'order_now_wishlisted_item') {
			spScUtil.orderWishlistedItem(c.data.item.sys_id, c.data.item.quantity, c.data.item.fields, c.data.item.newRecordID, additionalParms).then(function(response) {
				var a = response.data.result;
				if (!$scope.data.parentParams)
					$scope.$emit("$$uiNotification", a.$$uiNotification);
				$scope.$emit("$sp.sc_cat_item.submitted", a);
				$rootScope.$broadcast("$sp.service_catalog.wishlist.update");
				if (c.options.auto_redirect == 'false') {
					$rootScope.$broadcast("$sp.service_catalog.cart.submitted", true);
					spUtil.addInfoMessage($scope.m.requestSubmitted);
					return;
				} else {
					//$location.search('id=sc_request&is_new_order=true&table=sc_request&sys_id=' + a.sys_id);
					$location.search('id=utassp01_view_tickets&pageid=request');										
				}
			});
		}
		else {
			c.data.delivery_address = c.deliverTo;
			c.data.special_instructions = c.special_instructions;
			c.data.requested_for = c.requestedFor.value;
			var isOrderGuide = c.data.action == 'order_guide';
			c.server.update().then(function(response) {
				c.data.action = null;
				if (isOrderGuide)
					$scope.$emit("$sp.sc_order_guide.submitted", $scope.data.result);
				else
					$scope.$emit("$sp.cart.submitted", $scope.data.result);
				if (c.options.auto_redirect == 'false') {
					$rootScope.$broadcast("$sp.service_catalog.cart.update");
					$rootScope.$broadcast("$sp.service_catalog.cart.submitted", true);
					spUtil.addInfoMessage($scope.m.requestSubmitted);
					return;
				}
				else {
					//$location.search('id=sc_request&is_new_order=true&table=sc_request&sys_id=' + $scope.data.result.sys_id);
					$location.search('id=utassp01_view_tickets&pageid=request');					
					$timeout(function(){
						$rootScope.$broadcast("$sp.service_catalog.cart.update");
						$rootScope.$broadcast("$sp.service_catalog.cart.submitted", true);						
					})

				}
			});
		}
	}

	$scope.$on("field.change", function(evt, parms) {
		if (parms.field.name == 'requested_for') {
			c.data.cart.requested_for = parms.newValue;
			var getShippingAddrURL = '/api/sn_sc/v1/servicecatalog/cart/delivery_address/' + parms.newValue;
			$http.get(getShippingAddrURL).then(function handleSuccess(response) {
				if (response.data.result) {
					c.deliverTo = response.data.result.trim();
				} else {
					c.deliverTo = '';
				}
				c.changeShippingInfo();
			});
		}
	});

	c.cancel = function() {
		$rootScope.$broadcast("$sp.service_catalog.cart.cancel_order", true);
	}
	c.updateDetails();
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.attachment-list {
  	max-height: 180px;
  	overflow-y: scroll;
  	margin-bottom: 10px;
}

.accordion-toggle {
  	line-height: 13px;
}

textarea {
	resize: vertical;
}

.select2-additional-display-field {
  	padding-right: 5px;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>utassp01_sc_checkout_widget</id>
        <internal>false</internal>
        <link><![CDATA[function(scope, elem){
    scope.setFocusToAttachment = function () {
		setTimeout(function () {
			var inboxArray = elem.find("a.view-attachment");
			inboxArray.focus();
		}, 100);
	}
}
	]]></link>
        <name>UTASSP Catalog Checkout Widget</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	data.action = options.action;
	if (data.action)
		data.item = options.item;
	else
		data.action = 'checkout';
	
	var cartName = '';
	if (input)
		cartName = input.cart.name;
	else if (options.cart)
		cartName = options.cart.name;
		
	var m = data.msgs = {};
	m.dialogTitle = gs.getMessage("Delete Attachment");
	m.dialogMessage = gs.getMessage("Are you sure?");
	m.dialogOK = gs.getMessage("OK");
	m.dialogCancel = gs.getMessage("Cancel");
	m.renameSuccessMsg = gs.getMessage("Attachment renamed successfully");
	m.deleteSuccessMsg = gs.getMessage("Attachment deleted successfully");
	m.delete_attachment = gs.getMessage("Delete Attachment?");
	m.requestSubmitted = gs.getMessage("Thank you, your request has been submitted.");
	
	data.maxAttachmentSize = parseInt(gs.getProperty("com.glide.attachment.max_size", 1024));
	if (isNaN(data.maxAttachmentSize))
		data.maxAttachmentSize = 24;
	m.largeAttachmentMsg = gs.getMessage("Attached files must be smaller than {0} - please try again", "" + data.maxAttachmentSize + "MB");
	
	var cartJS;
	if (data.action !== 'order_now') {
		cartJS = new sn_sc.CartJS(cartName, '' + gs.getUser().getID());
		
		if (input && input.action === "change_shipping_info") {
			cartJS.setSpecialInstructions(input.special_instructions);
			cartJS.setRequestedFor(input.requestedFor);
			cartJS.setDeliveryAddress(input.deliverTo);
		}
	}
	
	if (input && input.action == 'order_guide') {
		var guideJS = new sn_sc.OrderGuide('' + cartName);
		cartJS = new sn_sc.CartJS('' + cartName);
		for(var i = 0; i < input.item.length; i++) {
			guideJS.navigateFromMap(input.item[i]);
		}
		cartJS.activateGuide();
		cartJS.setRequestedFor(input.requested_for);
		cartJS.setDeliveryAddress(input.delivery_address);
		cartJS.setSpecialInstructions(input.special_instructions);
		cartJS.setParentParams(input.parentParams);
		var request = cartJS.checkoutGuide();
		data.result = {sys_id: request.request_id, number: request.request_number, table: 'sc_request'};
		$sp.logStat('Checkout Request', 'sc_request', request.request_id);
		return;
	}
	
	if (input && input.action === 'checkout') {
		var request = cartJS.checkoutCart(true);
		data.result = {sys_id: request.request_id, number: request.request_number, table: 'sc_request'};
		$sp.logStat('Checkout Request', 'sc_request', request.request_id);
		return;
	}

	if (data.action !== 'order_now')
		data.cart = cartJS.getCartDetails(false);
	else
		data.cart = {name: cartName, sys_id: gs.generateGUID(), requested_for: gs.getUser().getID(), requested_for_display_name: gs.getUser().getDisplayName(), delivery_address: sn_sc.CartJS.getRequestedForAddress(gs.getUser().getID())};

	if (options && options.parentParams && options.parentParams.sysparm_parent_table && options.parentParams.sysparm_parent_sys_id && options.parentParams.sysparm_parent_sys_id != -1) { //if parent is passed
			var gr = new GlideRecord('request_parent_mapping');
			gr.get('parent_table', options.parentParams.sysparm_parent_table);
			gr.query();
			if (gr.next()) {
				var parent = new GlideRecord(options.parentParams.sysparm_parent_table);
				parent.get(options.parentParams.sysparm_parent_sys_id);
				if (JSUtil.notNil(parent.getValue(gr.requested_for_field))) {
					data.cart.requested_for = parent.getValue(gr.requested_for_field);
					data.cart.requested_for_display_name = parent.getDisplayValue(gr.requested_for_field);
					data.cart.delivery_address = sn_sc.CartJS.getRequestedForAddress(data.cart.requested_for);
				}
				data.parentParams = options.parentParams;
			}
	}
	
	if (options && options.requested_for && options.requested_for.id) { //If Passed via options
			data.cart.requested_for = options.requested_for.id;
			data.cart.requested_for_display_name = options.requested_for.displayValue;
			data.cart.delivery_address = sn_sc.CartJS.getRequestedForAddress(options.requested_for.id);
	}

	if (data.request_for) { //if value is changed by user
		var user = GlideUser.getUserByID(data.request_for);
		if (user.exists()) {
			data.cart.requested_for = data.request_for;
			data.cart.requested_for_display_name = user.getDisplayName();
			data.cart.delivery_address = sn_sc.CartJS.getRequestedForAddress(data.request_for);
		}
	}

	data.disable_req_for = sn_sc.CartJS.canViewRF();
	var reqForDispCols = gs.getProperty("glide.sc.request_for.columns");
	if (reqForDispCols && reqForDispCols.length > 0) {
		 reqForDispCols = reqForDispCols.replace(/;/g, ",")
	}
	data.reqForDispCols = reqForDispCols || "name";
	data.reqForQuery = gs.getProperty("glide.sc.request_for.query");
	
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-11-30 19:42:07</sys_created_on>
        <sys_id>e131931e4f426300f006121f9310c76d</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>UTASSP Catalog Checkout Widget</sys_name>
        <sys_package display_value="utassp" source="x_287765_utassp">2e58c8624f112300f006121f9310c726</sys_package>
        <sys_policy/>
        <sys_scope display_value="utassp">2e58c8624f112300f006121f9310c726</sys_scope>
        <sys_update_name>sp_widget_e131931e4f426300f006121f9310c76d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-11-30 19:54:56</sys_updated_on>
        <template><![CDATA[<div class="panel panel-default">
	<h1 class="padder-md h3">${Order Confirmation}
    <span class="text-base">
  	  <i class="fa fa-close pull-right text-base" tabindex="0" ng-click="c.cancel()"></i>
     </span>
  </h1>
	<div class="wrapper-md clearfix b-t">
		<div class="form-group">
			<div class="row">
				<div class="col-sm-8">
					<label for="requested-for">${Request For} <i class="fa fa-info-circle" uib-tooltip="${Request for yourself or on behalf of another person}" tooltip-placement="right" tooltip-append-to-body="true"></i></label>
					<sn-record-picker id="requested-for"
                            field="c.requestedFor"
                            table="'sys_user'" 
                            display-field="'name'" 
                            display-fields="c.data.reqForDispCols" 
                            value-field="'sys_id'" 
                            search-fields="c.data.reqForDispCols"
                            default-query="c.data.reqForQuery"
                            page-size="100"
                            options="{allowClear : false}"
                            sn-disabled="!c.data.disable_req_for">
					</sn-record-picker>
				</div>
				<div class="padder-v col-sm-12">
					<label for="deliver-to" ng-click="c.showDeliveryAddr = !c.showDeliveryAddr" tabindex="0">${Delivery Information} <span class="text-muted"> ${(Optional)}</span>
          				<i ng-class="c.showDeliveryAddr ? 'fa fa-minus-square-o' : 'fa fa-plus-square-o'" aria-expanded="{{c.showDeliveryAddr}}" class="m-t-xs pull-left accordion-toggle"></i>
          </label>
					<textarea class="form-control" ng-if="c.showDeliveryAddr" ng-model="c.deliverTo"  id="deliver-to" ng-model-options="{ updateOn: 'blur' }" ng-change="c.changeShippingInfo()" rows="3"></textarea>
				</div>
        <div class="col-sm-12">
					<label for="special-instructions" ng-click="c.showSpecialInstructions = !c.showSpecialInstructions" tabindex="0">${Special Instructions} <span class="text-muted"> ${(Optional)}</span>
						<i ng-class="c.showSpecialInstructions ? 'fa fa-minus-square-o' : 'fa fa-plus-square-o'" aria-expanded="{{c.showSpecialInstructions}}" class="m-t-xs pull-left accordion-toggle"></i>
					</label>
					<textarea class="form-control" ng-if="c.showSpecialInstructions" ng-model="c.special_instructions" id="special-instructions" ng-model-options="{ updateOn: 'blur' }" ng-change="c.changeShippingInfo()" rows="3"></textarea>
				</div>
		</div>
    </div>
	</div>
	<div class="panel-footer clearfix">
    <div class="attachment-list" ng-if="c.data.action !== 'order_now'">
			<now-attachments-list template="sp_attachment_single_line" class="padder-b"></now-attachments-list>
    </div>
		<div>
				<label ng-if="c.data.action !== 'order_now'" style="font-weight:normal;cursor:pointer;" class="padding-top-s">
					<sp-attachment-button></sp-attachment-button>
					<span style="padding-left:4px;">${Add attachments}</span>
				</label>
			<div class="pull-right">
				<button name="cancel" ng-disabled="c.checkoutInProgress" ng-click="c.cancel()" class="btn btn-default">${Cancel}</button>
				<button ng-disabled="c.checkoutInProgress || !c.requestedFor.value" name="submit" ng-click="c.triggerCheckout()" class="btn sc-btn btn-primary m-l-xs">
					<span ng-show="!c.checkoutInProgress">${Checkout}</span>
					<span ng-show="c.checkoutInProgress">${Ordering...}</span>
				</button>
			</div>
		</div>
	</div>
</div>]]></template>
    </sp_widget>
</record_update>
